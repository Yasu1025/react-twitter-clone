[{"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/index.tsx":"1","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/serviceWorker.ts":"2","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/app/store.ts":"3","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/App.tsx":"4","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/features/userSlice.ts":"5","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/firebase.ts":"6","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/components/Feed.tsx":"7","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/components/Auth.tsx":"8"},{"size":648,"mtime":1610780309000,"results":"9","hashOfConfig":"10"},{"size":5424,"mtime":1610780309000,"results":"11","hashOfConfig":"10"},{"size":390,"mtime":1610796436000,"results":"12","hashOfConfig":"10"},{"size":1027,"mtime":1610798672000,"results":"13","hashOfConfig":"10"},{"size":890,"mtime":1611067019000,"results":"14","hashOfConfig":"10"},{"size":739,"mtime":1610796025000,"results":"15","hashOfConfig":"10"},{"size":215,"mtime":1610806448000,"results":"16","hashOfConfig":"10"},{"size":9292,"mtime":1611502725000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jiqi6v",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/index.tsx",[],["37","38"],"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/serviceWorker.ts",[],"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/app/store.ts",[],"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/App.tsx",["39"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport styles from \"./App.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\nimport { auth } from \"./firebase\";\r\nimport Feed from \"./components/Feed\";\r\nimport Auth from \"./components/Auth\";\r\n\r\nconst App: React.FC = () => {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unSub = auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photoURL: authUser.photoURL,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unSub();\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <>\r\n  {user.uid ? (\r\n    <div className={styles.app}>\r\n      <Feed />\r\n    </div>\r\n  ) : (\r\n    <Auth />\r\n  )}\r\n  </>;\r\n};\r\n\r\nexport default App;\r\n","/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/features/userSlice.ts",[],"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/firebase.ts",[],"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/components/Feed.tsx",[],"/Users/KitasakaYasuhiro/Documents/github/react-twitter-clone/src/components/Auth.tsx",["40","41","42","43"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { auth, provider, storage } from '../firebase';\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Link,\n  Paper,\n  Box,\n  Grid,\n  Typography,\n  IconButton,\n  Modal\n} from '@material-ui/core'\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CameraIcon from \"@material-ui/icons/Camera\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport styles from './css/auth.module.css';\nimport { updateUserProfile } from '../features/userSlice';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1610728989927-d440224c2e9e?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=668&q=80)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  modal: {\n    outline: \"none\",\n    position: \"absolute\",\n    width: 400,\n    borderRadius: 10,\n    backgroundColor: \"white\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(10),\n  }\n}));\n\nconst Auth: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [userName, setUserName] = useState('');\n  const [avatarImg, setAvatarImg] = useState< File | null >(null);\n  const [isLogin, setIsLogin] = useState(true);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [resetEmail, setResetEmail] = useState('');\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if(e.target.files![0]) {\n      setAvatarImg(e.target.files![0]);\n      e.target.value = '';\n    }\n  }\n\n  const signinEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password);\n  }\n\n  const signupEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password);\n    let url = '';\n    if(avatarImg) {\n\n      // set random char to fileName\n      const S =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join(\"\");\n      const fileName = randomChar + \"_\" + avatarImg.name;\n\n      // set file to firebase storage\n      await storage.ref(`avatars/${fileName}`).put(avatarImg);\n      url = await storage.ref('avatars').child(fileName).getDownloadURL();\n\n      // set file to user\n      await authUser.user?.updateProfile({\n        displayName: userName,\n        photoURL: url\n      })\n\n      // update state\n      dispatch(updateUserProfile({\n        displayName: userName,\n        photoURL: url\n      }));\n    }\n  };\n\n  const signinGoogle = async () => {\n    await auth.signInWithPopup(provider).catch((err) => alert(err.message))\n  };\n\n  const formSubmitHandler = async () => {\n    if(isLogin) {\n      // signin\n      try {\n        await signinEmail();\n      } catch(err) {\n        alert(err.message);\n      }\n    } else {\n      // register\n      try {\n        await signupEmail();\n      } catch(err) {\n        alert(err.message);\n      }\n    }\n  }\n\n  const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n    await auth\n      .sendPasswordResetEmail(resetEmail)\n      .then(() => {\n        setIsOpenModal(false);\n        setResetEmail('');\n      })\n      .catch(err => {\n        alert(err.message);\n        setResetEmail('');\n      })\n  }\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            { !isLogin &&\n            <>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"Username\"\n                name=\"username\"\n                autoComplete=\"username\"\n                autoFocus\n                value={userName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setUserName(e.target.value);\n                }}\n              />\n              <Box textAlign=\"center\">\n                <IconButton>\n                  <label>\n                    <AccountCircleIcon\n                      fontSize=\"large\"\n                      className={\n                        avatarImg\n                          ? styles.login_addIconLoaded\n                          : styles.login_addIcon\n                      }\n                    />\n                    <input\n                      className={styles.login_hiddenIcon}\n                      type=\"file\"\n                      onChange={onChangeImageHandler}\n                    />\n                  </label>\n                </IconButton>\n              </Box>\n            </>}\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              startIcon={<EmailIcon />}\n              onClick={() => formSubmitHandler()}\n              disabled={\n                isLogin\n                  ? !email || password.length < 6\n                  : !userName || !email || password.length < 6 || !avatarImg\n              }\n            >\n              { isLogin ? 'Login' : 'Register' }\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <span\n                  className={styles.login_reset}\n                  onClick={() => setIsOpenModal(true)}\n                >Forgot passord?</span>\n              </Grid>\n              <Grid item>\n                <span \n                  className={styles.login_toggleMode}\n                  onClick={() => setIsLogin(!isLogin)}\n                >\n                  { isLogin ? 'Create new account' : 'Back to login' }\n                </span>\n              </Grid>\n            </Grid>\n\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<CameraIcon />}\n              className={classes.submit}\n              onClick={signinGoogle}\n            >\n              Sign In with Google\n            </Button>\n          </form>\n\n          <Modal open={isOpenModal} onClose={() => setIsOpenModal(false)}>\n            <div style={getModalStyle()} className={classes.modal}>\n              <div className={styles.login_modal}>\n                <TextField\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  type=\"email\"\n                  name=\"email\"\n                  label=\"Reset E-mail\"\n                  value={resetEmail}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setResetEmail(e.target.value);\n                  }}\n                />\n                <IconButton onClick={sendResetEmail}>\n                  <SendIcon />\n                </IconButton>\n              </div>\n            </div>\n          </Modal>\n\n        </div>\n      </Grid>\n    </Grid>\n  );\n}\nexport default Auth;",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":25},{"ruleId":"48","severity":1,"message":"52","line":1,"column":27,"nodeType":"50","messageId":"51","endLine":1,"endColumn":36},{"ruleId":"48","severity":1,"message":"53","line":9,"column":3,"nodeType":"50","messageId":"51","endLine":9,"endColumn":19},{"ruleId":"48","severity":1,"message":"54","line":10,"column":3,"nodeType":"50","messageId":"51","endLine":10,"endColumn":11},{"ruleId":"48","severity":1,"message":"55","line":11,"column":3,"nodeType":"50","messageId":"51","endLine":11,"endColumn":7},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]